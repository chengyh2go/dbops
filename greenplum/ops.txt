--列属性和数据被拷贝，但不包含约束（如非空）、注释和序列
CREATE TABLE dest_table_name as SELECT * from source_table_name;

--只复制表结构(默认复制非空约束)，没有数据
CREATE TABLE dest_table_name (like source_table_name);

--如果索引、主键约束和唯一约束需要被复制的话，那么需要在后面加上参数including indexes
CREATE TABLE dest_table_name (like source_table_name including indexes);

--查询版本
select version();

-- 查询数据库
select datname from pg_database;

-- 查询库占用的存储空间大小
select pg_size_pretty(pg_database_size( 'MyDatabase' ));

-- 查询各个数据库的存储空间大小
select datname,pg_size_pretty(pg_database_size(datname)) from pg_database;

--按表查询占用的存储空间大小
SELECT
    table_schema || '.' || table_name AS table_full_name,
    pg_size_pretty(pg_total_relation_size('"' || table_schema || '"."' || table_name || '"')) AS size
FROM information_schema.tables
ORDER BY
    pg_total_relation_size('"' || table_schema || '"."' || table_name || '"') DESC;

--查询表
select * from pg_class;
--示例：
select * from pg_class where relname='ads_uid_label';
select * from pg_class where relname like '%ads_uid_label%';

--查询分区表占用的存储空间大小
select pg_size_pretty(pg_relation_size('relation_name')) ;

-- Function: calc_partition_table(character varying, character varying)   -- DROP FUNCTION calc_partition_table(character varying, character varying);   CREATE OR REPLACE FUNCTION calc_partition_table(v_schemaname character varying, v_tablename character varying)   RETURNS bigint AS $BODY$ DECLARE     v_calc BIGINT := 0;     v_total BIGINT := 0;     v_tbname VARCHAR(200);     cur_tbname cursor for select schemaname||'.'||partitiontablename as tb from pg_partitions    where schemaname=v_schemaname and tablename=v_tablename; BEGIN     OPEN cur_tbname;     loop         FETCH cur_tbname into v_tbname;         if not found THEN             exit;         end if;         EXECUTE 'select pg_relation_size('''||v_tbname||''')' into v_calc;         v_total:=v_total+v_calc;             end loop;     CLOSE cur_tbname;     RETURN v_total; end; $BODY$   LANGUAGE plpgsql VOLATILE; ALTER FUNCTION calc_partition_table(character varying, character varying) OWNER TO gpadmin;


--查询字段名
select attname from pg_attribute where attrelid='public.t1'::regclass;

--查询表字段名、字段类型、字段注释信息
SELECT 'tablename' as table_name
 ,a.attname AS column_name
 ,format_type(a.atttypid, a.atttypmod) AS data_type
 ,d.description AS description
  ,a.attnum
 ,a.attnotnull AS notnull
 ,coalesce(p.indisprimary, FALSE) AS primary_key
 ,f.adsrc AS default_val
FROM pg_attribute a
LEFT JOIN pg_index p ON p.indrelid = a.attrelid AND a.attnum = ANY(p.indkey)
LEFT JOIN pg_description d ON d.objoid = a.attrelid AND d.objsubid = a.attnum
LEFT JOIN pg_attrdef f ON f.adrelid = a.attrelid AND f.adnum = a.attnum
WHERE a.attnum > 0
AND NOT a.attisdropped
AND a.attrelid = 'tablename'::regclass
ORDER BY a.attnum;

--修改字段类型
alter table t1  alter column sex type bigint using(sex::bigint);

--查询字段
select * from pg_attribute;
--示例
select * from pg_attribute where attname='xuid'

-- 查询数据库及数据库大小
select datname,pg_size_pretty(pg_database_size(datname)) from pg_database;

--列属性和数据被拷贝，但不包含约束（如非空）、注释和序列
CREATE TABLE dest_table_name as SELECT * from source_table_name;

--只复制表结构(默认复制非空约束)，没有数据
CREATE TABLE dest_table_name (like source_table_name);

--如果索引、主键约束和唯一约束需要被复制的话，那么需要在后面加上参数including indexes
CREATE TABLE dest_table_name (like source_table_name including indexes);

-- 查询Greenplum下一个schema中表的owner,示例以"public"为例
select c.relname,  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
from pg_catalog.pg_class c, pg_catalog.pg_namespace n
where
n.oid = c.relnamespace
and n.nspname='public'
and  c.relkind='r'  and relstorage in ('h', 'a');

-- 将某张表的所有权限赋予一个用户
grant all on table xxx to <user_name>


++++++++++++++++++跟外表相关的操作（以阿里的adb pg环境为例）+++++++++++++++++++++++++++++++++
-- 1 在AnalyticDB PostgreSQL数据库中创建ODPS FDW插件，写：pg_catalog.pg_extension
CREATE EXTENSION odps_fdw; 

-- 2 将使用权赋权给所有用户，示例如下：
GRANT USAGE ON FOREIGN DATA WRAPPER odps_fdw TO PUBLIC;
或者，赋给某个用户：
GRANT USAGE ON FOREIGN DATA WRAPPER odps_fdw TO quickbidev;

-- 3 创建 ODPS Server，写：pg_catalog.pg_foreign_server
CREATE SERVER odps_serv
  FOREIGN DATA WRAPPER odps_fdw
  OPTIONS (
    odps_endpoint 'http://service.cn-shanghai-test-d01.odps.ops.aliyun.jq.cics:80/api'
  );

-- 4 创建 ODPS User Mapping
CREATE USER MAPPING FOR  PUBLIC
  SERVER odps_serv
  OPTIONS (
    id '<odps access id>', --MaxCompute Account ID
    key '<odps access key>' --MaxCompute Account Key
  );
 
  CREATE USER MAPPING FOR  quickbidev
  SERVER odps_serv_2                                  -- ODPS Server 名称
  OPTIONS (
    id '<odps access id>',                                -- ODPS Account ID
    key '<odps access key>'                               -- ODPS Account Key
  );
  --写到了pg_catalog.pg_user_mappings这个视图中

-- 5 创建外表，写：pg_catalog.pg_foreign_table
CREATE FOREIGN TABLE IF NOT EXISTS ft_ads_uid_label (
uid  TEXT,
uid_type  TEXT,
equp_id  TEXT --示例字段
)
  SERVER odps_serv
  OPTIONS (
    project 'MC_IDP_dev',                   -- ODPS 项目空间
    table 'ads_uid_label',                       -- ODPS 表名称
    partition 'ds=20210923'
);

-- 6 创建本地表
CREATE TABLE test_local_ads_uid_label (
  uid  TEXT,
  uid_type  TEXT,
  equp_id  TEXT --示例字段
);

--7 导入外表数据到本地表，方式一：insert
INSERT INTO <本地目标表> SELECT * FROM <外表>;

--导入外表数据到本地表，方式二：create
CREATE TABLE <本地目标表> AS SELECT * FROM <外表>;

-- 对系统表的操作
select * from pg_catalog.pg_foreign_table;
set allow_system_table_mods=True;
insert into pg_catalog.pg_foreign_table(ftrelid,ftserver) values(123,123);
delete from pg_catalog.pg_foreign_table;

-- 删除external外表
drop external table ft_text_test01;
-- 删除foreign外表
drop foreign table ft_text_test01;

--将表的一列都置为同一个值：
UPDATE test_ads_uid_label SET ds='20211029';

--增加字段
ALTER TABLE table_name
ADD COLUMN new_column_name data_type;

--同时增加多个字段
ALTER TABLE table_name
ADD COLUMN new_column_name_1 data_type constraint,
ADD COLUMN new_column_name_2 data_type constraint,
...
ADD COLUMN new_column_name_n data_type constraint;


--增加字段注释
comment on column chengyh_test01.username is '用户名';
--增加表注释
comment on table chengyh_test01 is '报表';


--死锁的操作
select oid from pg_class where relname='锁表的表名';
select pid from pg_locks where relation='上面查出的oid';

如果查询到了结果，表示该表被锁 则需要释放锁定
select pg_cancel_backend(${上面查到的pid});
select pg_terminate_backend(上面的pid) 
select pg_terminate_backend(pid) from pg_locks where relation='上面查出的oid';

我的操作示例：
select pid from pg_locks where relation=(select oid from pg_class where relname='t_ods_lc_t_product_source_channel_hv');


--查看系统中正在执行的sql与lock_table有关的信息
SELECT locktype,
        pg_locks.pid,
         virtualtransaction,
         transactionid,
         nspname,
         relname,
         mode,
         granted,
    CASE
    WHEN granted='f' THEN
    'get_lock'
    WHEN granted='t' THEN
    'wait_lock'
    END lock_satus,
    CASE
    WHEN waiting='f' THEN
    'already get lock,sql executing'
    WHEN waiting='t' THEN
    'waiting get lock,sql waiting execute'
    END lock_satus,
 current_timestamp - least(query_start,xact_start) AS runtime,
 cast(date_trunc('second',query_start) AS timestamp) AS query_start, substr(query,1,25) AS query
FROM pg_locks LEFT OUTER
JOIN pg_class
    ON (pg_locks.relation = pg_class.oid) LEFT OUTER
JOIN pg_namespace
    ON (pg_namespace.oid = pg_class.relnamespace), pg_stat_activity
WHERE NOT pg_locks.pid=pg_backend_pid()
        AND pg_locks.pid=pg_stat_activity.pid
        AND pg_class.relname='t' --此处进行替换
ORDER BY  query_start;

--查询锁相关视图
create view v_locks_monitor as   
with    
t_wait as    
(    
select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,   
  a.objid,a.objsubid,a.pid,a.transactionid,a.mppsessionid,a.mppiswriter,a.gp_segment_id,     
  b.pid procpid,b.sess_id,b.waiting_reason,b.query current_query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name   
    from pg_locks a,pg_stat_activity b where a.mppsessionid=b.sess_id and not a.granted   

),   
t_run as   
(   
  select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,   
  a.objid,a.objsubid,a.pid,a.transactionid,a.mppsessionid,a.mppiswriter,a.gp_segment_id,     
  b.pid procpid,b.sess_id,b.waiting_reason,b.query current_query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name   
    from pg_locks a,pg_stat_activity b where a.mppsessionid=b.sess_id and a.granted   
),   
t_overlap as   
(   
  select r.* from t_wait w join t_run r on   
  (   
    r.locktype is not distinct from w.locktype and   
    r.database is not distinct from w.database and   
    r.relation is not distinct from w.relation and   
    r.page is not distinct from w.page and   
    r.tuple is not distinct from w.tuple and   
    r.transactionid is not distinct from w.transactionid and   
    r.classid is not distinct from w.classid and   
    r.objid is not distinct from w.objid and   
    r.objsubid is not distinct from w.objsubid and   
    r.mppsessionid <> w.mppsessionid   
  )    
),    
t_unionall as    
(    
  select r.* from t_overlap r    
  union all    
  select w.* from t_wait w    
)    
select locktype,datname,relation::regclass,page,tuple,textin(xidout(transactionid)),classid::regclass,objid,objsubid,   
string_agg(   
'Gp_Segment_Id: '||case when gp_segment_id is null then 'NULL' else gp_segment_id::text end||chr(10)|| 
'MppIsWriter: '||case when mppiswriter is null then 'NULL' when mppiswriter is true then 'TRUE' else 'FALSE' end||chr(10)|| 
'MppSessionId: '||case when mppsessionid is null then 'NULL' else mppsessionid::text end||chr(10)|| 
'ProcPid: '||case when procpid is null then 'NULL' else procpid::text end||chr(10)|| 
'Pid: '||case when pid is null then 'NULL' else pid::text end||chr(10)||   
'Lock_Granted: '||case when granted is null then 'NULL' when granted is true then 'TRUE' else 'FALSE' end||' , Mode: '||case when mode is null then 'NULL' else mode::text end||' , Waiting_Reason: '||case when waiting_reason is null then 'NULL' else waiting_reason::text end||chr(10)||   
'Username: '||case when usename is null then 'NULL' else usename::text end||' , Database: '||case when datname is null then 'NULL' else datname::text end||' , Client_Addr: '||case when client_addr is null then 'NULL' else client_addr::text end||' , Client_Port: '||case when client_port is null then 'NULL' else client_port::text end||' , Application_Name: '||case when application_name is null then 'NULL' else application_name::text end||chr(10)||    
'Xact_Start: '||case when xact_start is null then 'NULL' else xact_start::text end||' , Query_Start: '||case when query_start is null then 'NULL' else query_start::text end||' , Xact_Elapse: '||case when (now()-xact_start) is null then 'NULL' else (now()-xact_start)::text end||' , Query_Elapse: '||case when (now()-query_start) is null then 'NULL' else (now()-query_start)::text end||chr(10)||    
'SQL (Current SQL in Transaction): '||chr(10)||  
case when current_query is null then 'NULL' else current_query::text end,    
chr(10)||'--------'||chr(10)    
order by    
  (  case mode    
    when 'INVALID' then 0   
    when 'AccessShareLock' then 1   
    when 'RowShareLock' then 2   
    when 'RowExclusiveLock' then 3   
    when 'ShareUpdateExclusiveLock' then 4   
    when 'ShareLock' then 5   
    when 'ShareRowExclusiveLock' then 6   
    when 'ExclusiveLock' then 7   
    when 'AccessExclusiveLock' then 8   
    else 0   
  end  ) desc,   
  (case when granted then 0 else 1 end)  
) as lock_conflict  
from t_unionall   
group by   
locktype,datname,relation::regclass,page,tuple,textin(xidout(transactionid)),classid::regclass,objid,objsubid;  

--查看当前连接数
select count(1) from pg_stat_activity;

--查看最大连接数
gpconfig -s max_connections
show max_connections;

--设置最大连接数
gpconfig -c max_connections -v 2000 -m 500
这样就设置了master最大连接数是500，segment的连接数是2000




